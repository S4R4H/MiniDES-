import java.util.*;
public class MiniDES {
	static private ArrayList<Integer> key1 = new ArrayList<Integer>();
	static private ArrayList<Integer> key2 = new ArrayList<Integer>();
	static private int[] code = new int[8];
	static private int[][] sBox1 = {{3,1,0,2},{2,0,1,3},{2,3,1,0},{1,2,3,0}};
	static private int[][] sBox2 = {{1,3,2,0},{3,1,2,0},{2,0,3,1},{0,3,2,1}};

	public static void main(String[] args){
		boolean running = true;
		int choice = 0;
		boolean flag = true;
		Scanner stdin = new Scanner(System.in);
		while(running){
			System.out.println("Sarah's Mini DES encrypter/decrypter");
			while(flag){
				try{
					System.out.println("Would you like to encrypt or decrypt?");
					String answer = stdin.nextLine();
					answer = answer.toUpperCase();
					System.out.println(answer);
					if(answer.equals("ENCRYPT")){
						encrypt();
						flag = false;
					}
					else if(answer.equals("DECRYPT")){
						decrypt();
						flag = false;
					}
					else
						throw new Exception(); 
				}catch(Exception e){
					System.out.println("Invaild Answer");
				}
			}
			running = false;
		}
	}
	//step 1 scramble the plaintext
	public static void scramblePlainText(char[] plntxt){
		//old pos 0|1|2|3|4|5|6|7
		//new pos 1|4|0|2|7|3|6|5
		code[0]=Character.getNumericValue(plntxt[1]);
		code[1]=Character.getNumericValue(plntxt[4]);
		code[2]=Character.getNumericValue(plntxt[0]);
		code[3]=Character.getNumericValue(plntxt[2]);
		code[4]=Character.getNumericValue(plntxt[7]);
		code[5]=Character.getNumericValue(plntxt[3]);
		code[6]=Character.getNumericValue(plntxt[6]);
		code[7]=Character.getNumericValue(plntxt[5]);
	}
	//step 2a Generate Round Keys
	public static void generateRoundKeys(int[] sysKey){
		//From the system key we generate a pair of 5 bit strings, c0 & d0
		// c0 = sysKey Pos 9|3|0|4|10
		// d0 = sysKey Pos 7|8|2|6|1
		ArrayList<Integer> c0 = new ArrayList<Integer>(Arrays.asList(sysKey[9],sysKey[3],sysKey[0],sysKey[4],sysKey[10]));
		ArrayList<Integer> d0 = new ArrayList<Integer>(Arrays.asList(sysKey[7],sysKey[8],sysKey[2],sysKey[6],sysKey[1]));
		//Display on screen
		System.out.println("c0 = " + c0 + "  d0 = " + d0);
		//Now generate four additional 5 bit strings c1,c2,d1,d2
		//where c1 & d1 are found by removing the first bits and appending them to the end
		ArrayList<Integer> c1 = new ArrayList<Integer>();
		ArrayList<Integer> d1 = new ArrayList<Integer>();
		c1.addAll(c0);
		c1.add(c1.get(0));
		c1.remove(0);
		d1.addAll(d0);
		d1.add(d1.get(0));
		d1.remove(0);
		ArrayList<Integer> c2 = new ArrayList<Integer>();
		ArrayList<Integer> d2 = new ArrayList<Integer>();
		c2.addAll(c1);
		c2.add(c2.get(0));
		c2.remove(0);
		d2.addAll(d1);
		d2.add(d2.get(0));
		d2.remove(0);
		//Display on screen
		System.out.println("c1 = " + c1 + "  d1 = " + d1);
		System.out.println("c2 = " + c2 + "  d2 = " + d2);
		//Next concatonate c1&d1 to produce the pair of 10 bit strings
		ArrayList<Integer> c1d1 = new ArrayList<Integer>();
		c1d1.addAll(c1);
		c1d1.addAll(d1);
		ArrayList<Integer> c2d2 = new ArrayList<Integer>();
		c2d2.addAll(c2);
		c2d2.addAll(d2);
		//From these we produce the 8-bit round keys by selecting bits
		//according to 7|1|3|8|6|9|5|2
		key1.addAll(Arrays.asList(c1d1.get(7),c1d1.get(1),c1d1.get(3),c1d1.get(8),c1d1.get(6),c1d1.get(9),c1d1.get(5),c1d1.get(2)));
		key2.addAll(Arrays.asList(c2d2.get(7),c2d2.get(1),c2d2.get(3),c2d2.get(8),c2d2.get(6),c2d2.get(9),c2d2.get(5),c2d2.get(2)));
		//Display on screen
		System.out.println("key1 = " + key1 + "  key2 = " + key2);
	}
	//Step 2b: Fiestle
	public static ArrayList<Integer> fiestle2Round(){
		ArrayList<Integer> l0 = new ArrayList<Integer>(Arrays.asList(code[0],code[1],code[2],code[3]));
		ArrayList<Integer> r0 = new ArrayList<Integer>(Arrays.asList(code[4],code[5],code[6],code[7]));
		//Display on screen
		System.out.println("l0 = " + l0+ "  r0 = " + r0);
		//right 0 become left 1
		ArrayList<Integer> l1 = r0;
		ArrayList<Integer> r1 = fiestleFunction(r0, 1);
		//r1 xor with l0
		for(int i = 0; i < r1.size(); i++){
			int xorSum = l0.get(i)^r1.get(i);
			r1.set(i, xorSum);
		}
		//Display on screen
		System.out.println("l1 = " + l1+ "  r1 = " + r1);
		//round 2
		//right 1 becomes left 2
		ArrayList<Integer> l2 = r1;
		ArrayList<Integer> r2 = fiestleFunction(r1, 2);
		//Display on screen
		//r2 xor with l1
		for(int i = 0; i < r2.size(); i++){
			int xorSum = l1.get(i)^r2.get(i);
			r2.set(i, xorSum);
		}
		System.out.println("l2 = " + l2+ "  r2 = " + r2);
		//rounds done concatonate r2&l2
		ArrayList<Integer> r2l2 = new ArrayList<Integer>();
		r2l2.addAll(r2);
		r2l2.addAll(l2);
		//Display on screen
		System.out.println("r2l2 = " + r2l2);
		return r2l2;

	}
	//fiestle function
	public static ArrayList<Integer> fiestleFunction(ArrayList<Integer> input, int round){
		//input goes through fiestle function
		//step 1: Expand
		// left pos 0|1|2|3 >> 2|0|1|3|1|3|2|0
		ArrayList<Integer> temp = new ArrayList<Integer>();
		temp.addAll(Arrays.asList(input.get(2),input.get(0),input.get(1),input.get(3),input.get(1),input.get(3),input.get(2),input.get(0)));
		System.out.println("expand  >> " + temp);
		ArrayList<Integer> in = new ArrayList<Integer>();
		//Step 2: XOR with round key
		ArrayList<Integer> key;
		if(round == 1){	key = key1; }
		else{ key = key2;}

		for(int i = 0; i < temp.size(); i++){
			int xorSum = temp.get(i)^key.get(i);
			in.add(xorSum);
		}
		System.out.println("after xor " + in);
		//Step 3: S-Boxes
		//split the left 0
		ArrayList<Integer> sl = new ArrayList<Integer>(Arrays.asList(in.get(0),in.get(1),in.get(2),in.get(3)));
		ArrayList<Integer> sr = new ArrayList<Integer>(Arrays.asList(in.get(4),in.get(5),in.get(6),in.get(7)));
		//Use S-Box1 for sl

		//Outer bits of sl becomes the row number:
		String outer = Integer.toString(sl.get(0))+Integer.toString(sl.get(3));
		int row = Integer.parseInt(outer, 2);

		//inner bits of sl becomes the col number:
		String inner = Integer.toString(sl.get(1))+Integer.toString(sl.get(2));
		int col = Integer.parseInt(inner, 2);
		//retrieve results from S-Box 1
		int sNum = sBox1[row][col];
		String result1 = Integer.toBinaryString(sNum);
		if(result1.length() < 2){
			result1 = "0" + result1;
		}

		//Use S-Box2 for sr

		//Outer bits of sr becomes the row number:
		outer = Integer.toString(sr.get(0))+Integer.toString(sr.get(3));
		row = Integer.parseInt(outer, 2);

		//inner bits of sr becomes the col number:
		inner = Integer.toString(sr.get(1))+Integer.toString(sr.get(2));
		col = Integer.parseInt(inner, 2);
		//retrieve results from S-Box 2
		sNum = sBox2[row][col];
		String result2 = Integer.toBinaryString(sNum);
		if(result2.length() < 2){
			result2 = "0" + result2;
		}

		//concatonate the outputs
		String result = result1 + result2;
		System.out.println("s box result " + result);
		char[] tempRes = result.toCharArray();
		//Step 4: Shuffle the concatonated s-box results
		// 0|1|2|3 >> 1|3|0|2
		ArrayList<Integer> intResult = new ArrayList<Integer>();
		intResult.addAll(Arrays.asList(Character.getNumericValue(tempRes[1]),Character.getNumericValue(tempRes[3]),Character.getNumericValue(tempRes[0]),Character.getNumericValue(tempRes[2])));
		System.out.println("after shuffle" + intResult);
		return intResult;	
	}
	//Step 3: permute the output of the round feistle to get cipherText
	public static String result(ArrayList<Integer> input){
		// input pos 0|1|2|3|4|5|6|7 >> 2|0|3|5|1|7|6|4
		//Display on screen
		ArrayList<Integer> cipher = new ArrayList<>
		(Arrays.asList(input.get(2),input.get(0),input.get(3),input.get(5),
				input.get(1),input.get(7),input.get(6),input.get(4))); 
		String cipherText = String.valueOf(cipher.get(0)) + String.valueOf(cipher.get(1)) + String.valueOf(cipher.get(2)) + String.valueOf(cipher.get(3))+
				String.valueOf(cipher.get(4))+String.valueOf(cipher.get(5))+String.valueOf(cipher.get(6))+String.valueOf(cipher.get(7));
		return cipherText;
	}

	public static void encrypt(){
		Scanner stdin = new Scanner(System.in);
		boolean flag = true;
		String systemKey = "";
		while(flag){
			try{
				System.out.println("Please enter an 12-digit binary system key");
				systemKey = stdin.nextLine();
				for(int i = 0; i < systemKey.length();i++){
					if(systemKey.charAt(i)!= '1' && systemKey.charAt(i)!='0'){
						throw new Exception();
					}
				}
				if(systemKey.length()!= 12){
					throw new Exception(); 
				}
				flag = false; 
			}catch(Exception e){
				System.out.println("Invaild Answer");
			}
		}
		String plaintext = "";
		flag = true;
		while(flag){
			try{
				System.out.println("Please enter an 8-digit binary number to encrypt");
				plaintext = stdin.nextLine();
				for(int i = 0; i < plaintext.length();i++){
					if(plaintext.charAt(i)!= '1' && plaintext.charAt(i)!= '0')
						throw new Exception();
				}
				if(plaintext.length()!= 8){
					throw new Exception(); 
				}
				flag = false; 
			}catch(Exception e){
				System.out.println("Invaild Answer");
			}
		}
		char[] skChar = systemKey.toCharArray();
		int[] sysKey = new int[12];
		for(int i = 0; i < skChar.length; i++){
			sysKey[i]=Character.getNumericValue(skChar[i]);
		}
		char[] plntxt = plaintext.toCharArray();
		//step 1 scramble plaintext
		scramblePlainText(plntxt);
		//step 2a generate Round Keys
		generateRoundKeys(sysKey);
		//step 2b and Step 3: get result
		String result = result(fiestle2Round());
		System.out.println("The CipherText is " + result);
	}
	public static void decrypt(){
		Scanner stdin = new Scanner(System.in);
		boolean flag = true;
		String systemKey = "";
		while(flag){
			try{
				System.out.println("Please enter the 12-digit binary system key");
				systemKey = stdin.nextLine();
				for(int i = 0; i < systemKey.length();i++){
					if(systemKey.charAt(i)!= '1' && systemKey.charAt(i)!='0'){
						throw new Exception();
					}
				}
				if(systemKey.length()!= 12){
					throw new Exception(); 
				}
				flag = false; 
			}catch(Exception e){
				System.out.println("Invaild Answer");
			}
		}
		String ciphertext = "";
		flag = true;
		while(flag){
			try{
				System.out.println("Please enter the 8-digit binary number to decrypt");
				ciphertext = stdin.nextLine();
				for(int i = 0; i < ciphertext.length();i++){
					if(ciphertext.charAt(i)!= '1' && ciphertext.charAt(i)!= '0')
						throw new Exception();
				}
				if(ciphertext.length()!= 8){
					throw new Exception(); 
				}
				flag = false; 
			}catch(Exception e){
				System.out.println("Invaild Answer");
			}
		}
		char[] skChar = systemKey.toCharArray();
		int[] sysKey = new int[12];
		for(int i = 0; i < skChar.length; i++){
			sysKey[i]=Character.getNumericValue(skChar[i]);
		}
		char[] cphtxt = ciphertext.toCharArray();
		//step 1
		generateRoundKeys(sysKey);
		cphtxt = unscramble(cphtxt);
		ArrayList<Integer> scrambled = decryptFiestle2Rounds(cphtxt);
		String result = unscramblePlaintext(scrambled);

		//step 2b and Step 3: get result
		System.out.println("The PlainText is " + result);
	}
	public static char[] unscramble(char[] ct){

		char[] result = {ct[1],ct[4],ct[0],ct[2],ct[7],ct[3],ct[6],ct[5]};
		for(int i = 0; i < result.length; i++)
			System.out.print(result[i]);
		return result;
	}
	public static ArrayList<Integer> decryptFiestle2Rounds(char[] ct){
		ArrayList<Integer> r2l2 = new ArrayList<Integer>();
		for(int i = 0; i < ct.length; i++){
			r2l2.add(Character.getNumericValue(ct[i]));
		}
		//Display on screen
		System.out.println("r2l2 = " + r2l2);
		ArrayList<Integer> l2 = new ArrayList<Integer>(Arrays.asList(r2l2.get(4),r2l2.get(5),r2l2.get(6),r2l2.get(7)));
		ArrayList<Integer> r2 = new ArrayList<Integer>(Arrays.asList(r2l2.get(0),r2l2.get(1),r2l2.get(2),r2l2.get(3)));
		//Display on screen
		System.out.println("l2 = " + l2+ "  r2 = " + r2);
		ArrayList<Integer> r1 = l2;
		ArrayList<Integer> l1 = fiestleFunction(r1, 2);

		for(int i = 0; i < l1.size(); i++){
			int xorSum = r2.get(i)^l1.get(i);
			l1.set(i, xorSum);
		}
		//Display on screen
		System.out.println("l1 = " + l1+ "  r1 = " + r1);
		ArrayList<Integer> r0 = l1;
		ArrayList<Integer> l0 = fiestleFunction(r0, 1);

		for(int i = 0; i < l0.size(); i++){
			int xorSum = r1.get(i)^l0.get(i);
			l0.set(i, xorSum);
		}
		//Display on screen
		System.out.println("l0 = " + l0+ "  r0 = " + r0);
		ArrayList<Integer> l0r0 = new ArrayList<Integer>();
		l0r0.addAll(l0);
		l0r0.addAll(r0);
		return l0r0;
	}
	public static String unscramblePlaintext(ArrayList<Integer> scrambled){
		String answer = String.valueOf(scrambled.get(2))+String.valueOf(scrambled.get(0))+String.valueOf(scrambled.get(3))+String.valueOf(scrambled.get(5))+
				String.valueOf(scrambled.get(1))+String.valueOf(scrambled.get(7))+String.valueOf(scrambled.get(6))+String.valueOf(scrambled.get(4));
		return answer;
	}

}

